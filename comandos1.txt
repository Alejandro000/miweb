Estos son los pasos, configuraciones y comandos para usar en git estbleciendo el entorno de trabajo

Configuracion:
    1. Versión de git: git --version
    2. Configuración global y no por proyecto: git config --global user.name "Nombre del Usuario"
    3. Configuracion del correo: git config --global user.email correo del user
    4. Indicador de nuestro editor de texto por defecto: git config --global core.editor "code --wait"
    5. Archivo de configuración global: git config --global -e
    6. Establecer los caracteres CR LF para el SO del usuario:
        Windows: git config --global core.autocrlf true
        Mac/Linux: git config --global core.autocrlf input
    7. Visualizador de los comandos de git: git config -h

Comandos:
    1. listar los archivos y carpetas dentro del directorio donde estamos: ls
    2. Nos indica el sito donde nos encontramos en la terminal: pwd
    3. Crear directorio: mkdir nombredeldirectorio
    4. Inicializar un repositorio git completamente vacío dentro del directorio que hemos creado: git init
    5. Mostrar todos los archivos del directorio: ls -a
    6. El directorio .git dentro de nuestro proyecto muestra todos los archivos que usa git para gestionar nuestros proyectos, muestra los detalles de implementación donde se almacena absolutamente todo. Y está optimizado para usar el menor espacio. La carpeta .git es ignorada por todos los repositorios y nunca se comparte.

Flujo de trabajo:
    Computador -|-> Stage -|-> Commit -|-> Server
    Computador: Aquí se agregan y modifican los archivos, pero solo de manera local.
    Stage: Al ejecutar el comando de git add se pasan los archivos del Computador a Stage. Todavía no se reflejarán los cambios en el repositorio. Es una etapa intermedia e la que se indican cuales son los cambios que hemos efectuado y en que archivos. Y no pasan todos los archivos modificados, solo los que nostros elijamos. Tambien podemos sacar los elementos de la etapa de stage.
    Commit: Archivos comprometidos, al pasar los archivos de Stage a Commit se eliminan del proceso de Stage. Son los archivos que se subiran al Server
    Server: Aquí se suben los archivos comprometidos.

    //El flujo es el mismo por si se desea eliminar un archivo.

Cambios a Stage:
    1. Abre VSC: code .
    2. Estado de nuestro repositorio: git status
    3. Seleccionamos el archivo que deseamos agregar a Stage (existen varias formas): 
        git add ejemplo.html (Aqui se escribe el nombre del archivo y el tipo de archivo que es)
        git add *.txt (Agregar todos los archivos .txt)
        git add . (Agega absolutamente todos los archivos, es considerado una mala practica)
    4. Para agregar mas de un archivo se puede usar la siguiente sintaxis:
        git add test1.txt test2.txt (Se separan con un espacio).
    5. Para comprometer los cambios se utiliza el comando: git commit -m "Texto descriptivo para el commit"
        5.1 Como realizar un commit de una forma opcional: git commit (Abrira el VSC, escribimos el nombre descriptivo, guardamos y cerramos la ventana abierta en el VSC)

Eliminando archivos de nuestro repositorio:
    1. Comando para eliminar archivos: rm test1.txt
    Para borrarlo hay que seguir este flujo:
        rm test1.txt (borrar el archivo)
        git add test1.txt (Añadir el cambio, realizado, al Stage)
        git commit -m "Eliminando test1" (Se compromete el cambio realizado)
    Con este proceso el archivo se eliminó y podemos visualizarlo con el comando ls para confirmar que el archivo ya no está
    Existe una forma de saltar el paso de añadir (git add test1.txt) y es la siguiente:
        git rm test1.txt
        git commit -m "Eliminar test1 de manera más directa"

Recuperar cambios del Stage:
    Los archivos borrados que se encuentran en Stage pueden ser recuperados mediante el siguiente flujo:
        git restore --staged test1.txt (Se regresa el archivo de Satge al Computador, sin embargo el archivo sigue eliminado)
        git restore test1.txt (Se recupera el archivo borrado)

Mover y cambiar nombre de los archivos:
    1. mv test1.txt test2.txt (Se cambia el nombre del archivo seleccionado)
    2. git add test1.txt test2.txt (Se elimina el test1 y se crea el test2, lo unico que sucede es que se cambia de nombre, sin embargo git lo maneja como si fueran distintos archivos, por lo cual debemos realizar los pasos como si fueran dos archivos)
    3. git commit -m "Cambio de nombre"
    Existe una forma de saltar el paso de añadir (git add test1.txt test2.txt) y es la siguiente:
        git mv test1.txt test2.txt
        git commit -m "Cambio de nombre 1.1"

Ignorando archivos y directorios:
    1. Se crea el archivo .env
    2. Se ingresan los valores que se desean agregar
    3. Se crea otro archivo llamado .gitignore
    4. Dentro de git ignore escribimos el nombre de los archivos que deseamos ignorar: 
        .env
        etc
    5. Se agrega el archivo .gitignore al Stage: git add .gitignore
    6. Se realiza el commit: git commit -m "agregando archivo gitignore"

Git Status:
    Para visualizar mejor el status de git usamos el comando: git status -s
    Se visualizaran distintas letras de diferente color:
    Archivo modificado que no está en Stage: M (rojo)
    Archivo modificado en stage: M (verde)
    Archivo renombrado: R (Verde)
    Archivo añadido a Stage: A (Verde)
    Archvio creado y guardado en la Computadora: ?? (Rojo)
    Los archivos que cambian nombre pero no han hecho el stage: D (rojo y junto a la letra de A o M)
